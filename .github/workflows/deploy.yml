name: Deploy SCIM Demo

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

# Required for OIDC
permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: terraform
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-SCIM-Deploy
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Verify AWS Identity
        run: |
          echo "🔐 Verifying AWS authentication..."
          aws sts get-caller-identity
          echo "✅ Successfully authenticated with AWS"
      
      - name: Calculate App File Hash
        id: file_hash
        run: |
          # Calculate hash of Python file to force redeployment when it changes
          cd ..
          APP_HASH=$(sha256sum demo_scim_server.py | cut -d' ' -f1 | cut -c1-8)
          echo "app_hash=$APP_HASH" >> "$GITHUB_OUTPUT"
          echo "📦 Application file hash: $APP_HASH"
          echo "   This hash will be included in user-data to force instance replacement when code changes"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: Terraform Init
        run: |
          echo "🔧 Initializing Terraform..."
          terraform init
      
      - name: Terraform Validate
        run: |
          echo "✅ Validating Terraform configuration..."
          terraform validate
      
      - name: Terraform Plan
        run: |
          echo "📋 Creating Terraform plan..."
          terraform plan -input=false \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="route53_zone_id=${{ secrets.ROUTE53_ZONE_ID }}" \
            -var="scim_auth_token=${{ secrets.SCIM_AUTH_TOKEN }}" \
            -var="scim_basic_user=${{ secrets.SCIM_BASIC_USER }}" \
            -var="scim_basic_pass=${{ secrets.SCIM_BASIC_PASS }}" \
            -var="app_version=${{ steps.file_hash.outputs.app_hash }}" \
            -out=tfplan
          
          echo "✅ Plan created successfully"
      
      - name: Terraform Apply
        run: |
          echo "🚀 Applying Terraform configuration..."
          terraform apply -auto-approve tfplan
      
      - name: Get Terraform Outputs
        id: tf
        run: |
          echo "dashboard_url=$(terraform output -raw dashboard_url)" >> "$GITHUB_OUTPUT"
          echo "scim_base_url=$(terraform output -raw scim_base_url)" >> "$GITHUB_OUTPUT"
          echo "public_ip=$(terraform output -raw public_ip)" >> "$GITHUB_OUTPUT"
          echo "ssh_command=$(terraform output -raw ssh_command)" >> "$GITHUB_OUTPUT"
          echo "domain_name=$(terraform output -raw domain_name)" >> "$GITHUB_OUTPUT"

      - name: Wait for Server Initialization (Caddy + Flask)
        env:
          DOMAIN_NAME: ${{ steps.tf.outputs.domain_name }}
          PUBLIC_IP: ${{ steps.tf.outputs.public_ip }}
        run: |
          set -euo pipefail

          DOMAIN="$DOMAIN_NAME"
          IP="$PUBLIC_IP"
          HEALTH="https://${DOMAIN}/health"

          echo "⏳ Waiting for server to complete setup…"
          echo "   Domain: $DOMAIN"
          echo "   IP:     $IP"
          echo "   Health: $HEALTH"
          echo

          # Give cloud-init / systemd / ACME a head start
          sleep 120

          # Try up to ~10 minutes: 20 attempts x 30s
          for i in $(seq 1 20); do
            CODE=$(curl -ksS -o /dev/null -w "%{http_code}" \
              --connect-timeout 10 --max-time 20 \
              --resolve "${DOMAIN}:443:${IP}" \
              "$HEALTH" || echo "000")

            echo "Attempt $i/20 → HTTP $CODE"
            if [ "$CODE" = "200" ]; then
              echo "✅ Server is ready and responding!"
              exit 0
            fi
            [ "$i" -le 3 ] && echo "   Note: DNS/ACME may still be propagating. Retrying…"
            sleep 30
          done

          echo "⚠️  Health check did not reach 200 within the window."
          echo "    Try: ${{ steps.tf.outputs.ssh_command }} and 'sudo journalctl -u scim-demo -f'"
          exit 1

      - name: Create Deployment Summary
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << 'EOF'
          ## 🚀 Deployment Successful!

          ### 📍 Access Your Demo

          | Resource | URL |
          |----------|-----|
          | **Dashboard** | [${{ steps.tf.outputs.dashboard_url }}](${{ steps.tf.outputs.dashboard_url }}) |
          | **SCIM API** | `${{ steps.tf.outputs.scim_base_url }}` |
          | **Health Check** | [${{ steps.tf.outputs.dashboard_url }}/health](${{ steps.tf.outputs.dashboard_url }}/health) |
          | **Public IP** | `${{ steps.tf.outputs.public_ip }}` |
          | **App Version** | `${{ steps.file_hash.outputs.app_hash }}` |

          ### 🔧 Configure in Okta (Basic Auth recommended)

          1. **SCIM Base URL:** `https://${{ steps.tf.outputs.domain_name }}/scim/v2`
          2. **Basic Auth:** username/password from your secrets (`SCIM_BASIC_USER` / `SCIM_BASIC_PASS`)
          3. **(Alt) Header Auth:** `Authorization: Bearer ${{ secrets.SCIM_AUTH_TOKEN }}`

          **SSH Access**
          ```bash
          ${{ steps.tf.outputs.ssh_command }}
          ```

          **Check logs**
          ```bash
          # Server setup
          sudo tail -f /var/log/user-data.log
          # SCIM service
          sudo journalctl -u scim-demo -f
          # Caddy
          sudo journalctl -u caddy -f
          ```

          *Deployment completed at $(date)*  
          *Code version: ${{ steps.file_hash.outputs.app_hash }}*
          EOF
